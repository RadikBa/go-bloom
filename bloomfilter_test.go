package bloomfilter

import (
	"encoding/binary"
	"fmt"
	"slices"
	"sync"
	"testing"
)

type IPSet struct {
	*Filter
}

var pool = &sync.Pool{
	New: func() interface{} {
		bs := make([]byte, 4)
		return &bs
	},
}

func int2Bytes(num uint32) *[]byte {
	bs := pool.Get().(*[]byte)
	binary.BigEndian.PutUint32(*bs, num)
	return bs
}

func (s *IPSet) AddIP(ip uint32) {
	bs := int2Bytes(ip)
	s.Add(*bs)
	pool.Put(bs)
}

func (s *IPSet) TestIP(ip uint32) bool {
	bs := int2Bytes(ip)
	result := s.Test(*bs)
	pool.Put(bs)
	return result
}

func NewIPSet(n int) *IPSet {
	const falsePosProb = 0.01
	size, k := estimateBloomFilterParams(n, falsePosProb)
	set := NewFilter(size, k)
	return &IPSet{set}
}

func filter(input, black []uint32) []uint32 {
	blackSet := NewIPSet(len(black))
	for _, ip := range black {
		blackSet.AddIP(ip)
	}

	inputSet := NewIPSet(len(input))
	var filtered []uint32
	for _, ip := range input {
		if blackSet.TestIP(ip) {
			continue
		}
		if !inputSet.TestIP(ip) {
			inputSet.AddIP(ip)
			filtered = append(filtered, ip)
		}
	}
	return filtered
}

func TestFilter(t *testing.T) {
	input := []uint32{11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10}
	black := []uint32{3, 6}
	expected := []uint32{11, 2, 4, 5, 7, 8, 9, 10}
	result := filter(input, black)
	if !slices.Equal(result, expected) {
		t.Fatalf("Expected: %v, Actual: %v", expected, result)
	}
}

func BenchmarkFilter(b *testing.B) {
	b.StopTimer()
	input := []uint32{11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10,
		11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10,
		11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10,
		11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 6, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10}
	fmt.Println("Size of input:", len(input))
	black := []uint32{3, 6}

	b.StartTimer()
	for i := 0; i < b.N; i++ {
		_ = filter(input, black)
	}
	b.StopTimer()
}
